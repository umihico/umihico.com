import type { NextPage } from "next";
import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import SplitColumn from "../components/SplitColumn";
const Home: NextPage = () => {
  let letterRowsLeft = Array(50)
    .fill(" ")
    .map(() => Array(16).fill(""));
  let letterRowsRight = Array(50)
    .fill(" ")
    .map(() => Array(16).fill(""));

  const messages = ["Hello,", "I am umihico."];
  letterRowsRight[1] = [
    letterRowsRight[1][0],
    ...messages[0].split(""),
    ...letterRowsRight[1].slice(messages[0].length + 1),
  ];
  letterRowsRight[2] = [
    letterRowsRight[2][0],
    ...messages[1].split(""),
    ...letterRowsRight[2].slice(messages[1].length + 1),
  ];
  letterRowsLeft[1] = [
    letterRowsLeft[1][0],
    ...messages[0]
      .split("")
      .map((l) => l.charCodeAt(0).toString(16).toUpperCase().padStart(2, "0")),
    ...letterRowsLeft[1].slice(messages[0].length + 1),
  ];
  letterRowsLeft[2] = [
    letterRowsLeft[2][0],
    ...messages[1]
      .split("")
      .map((l) => l.charCodeAt(0).toString(16).toUpperCase().padStart(2, "0")),
    ...letterRowsLeft[2].slice(messages[1].length + 1),
  ];

  const [columnLeftWidth, columnRightWidth] = [66, 33];

  const hexList = Array(16 * 16)
    .fill(0)
    .map((_, i) => {
      return {
        letter: String.fromCharCode(i),
        indexHex: i.toString(16).toUpperCase().padStart(2, "0"),
        index: i,
        okay:
          i >= 33 &&
          ![127, 129, 141, 143, 144, 157, 160].includes(i) &&
          i <= 256 &&
          String.fromCharCode(i).length == 1,
      };
    })
    .filter((d, _) => d.okay)
    .sort((a, b) => {
      const pi = String(Math.PI).replace(".", "");
      return (
        parseInt(pi.charAt(a.index % pi.length)) -
        parseInt(pi.charAt(b.index % pi.length))
      );
    });
  const [time, updateTime] = useState(Date.now());
  const [nonce, updateNonce] = useState(0);

  useEffect(() => {
    const timeoutId: null | ReturnType<typeof setTimeout> = setTimeout(
      () => updateTime(Date.now()),
      300
    );
    updateNonce(nonce + 1);
    console.log(timeoutId);
    return () => {
      clearTimeout(timeoutId);
    };
  }, [time]);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        ></meta>
      </Head>
      <div style={{ display: "block", width: "100%" }}>
        <div
          className="split-column split-column-left"
          style={{ width: `${columnLeftWidth}%` }}
        >
          <SplitColumn
            columnWidthPercent={columnLeftWidth}
            isLeftColumn={true}
            letterRows={letterRowsLeft}
            hexList={hexList}
            nonce={nonce}
          ></SplitColumn>
        </div>
        <div></div>
        <div
          className="split-column split-column-right"
          style={{ width: `${columnRightWidth}%` }}
        >
          <SplitColumn
            columnWidthPercent={columnRightWidth}
            isLeftColumn={false}
            letterRows={letterRowsRight}
            hexList={hexList}
            nonce={nonce}
          ></SplitColumn>
        </div>
      </div>
    </div>
  );
};

export default Home;
